// Generated by gencpp from file final_project/CentroidResponse.msg
// DO NOT EDIT!


#ifndef FINAL_PROJECT_MESSAGE_CENTROIDRESPONSE_H
#define FINAL_PROJECT_MESSAGE_CENTROIDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>
#include <geometry_msgs/Point.h>

namespace final_project
{
template <class ContainerAllocator>
struct CentroidResponse_
{
  typedef CentroidResponse_<ContainerAllocator> Type;

  CentroidResponse_()
    : foundCentroid()
    , centroid()  {
    }
  CentroidResponse_(const ContainerAllocator& _alloc)
    : foundCentroid(_alloc)
    , centroid(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Bool_<ContainerAllocator>  _foundCentroid_type;
  _foundCentroid_type foundCentroid;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _centroid_type;
  _centroid_type centroid;





  typedef boost::shared_ptr< ::final_project::CentroidResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::final_project::CentroidResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CentroidResponse_

typedef ::final_project::CentroidResponse_<std::allocator<void> > CentroidResponse;

typedef boost::shared_ptr< ::final_project::CentroidResponse > CentroidResponsePtr;
typedef boost::shared_ptr< ::final_project::CentroidResponse const> CentroidResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::final_project::CentroidResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::final_project::CentroidResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::final_project::CentroidResponse_<ContainerAllocator1> & lhs, const ::final_project::CentroidResponse_<ContainerAllocator2> & rhs)
{
  return lhs.foundCentroid == rhs.foundCentroid &&
    lhs.centroid == rhs.centroid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::final_project::CentroidResponse_<ContainerAllocator1> & lhs, const ::final_project::CentroidResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace final_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::final_project::CentroidResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::final_project::CentroidResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::final_project::CentroidResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::final_project::CentroidResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::final_project::CentroidResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::final_project::CentroidResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::final_project::CentroidResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e6be3035fdb6995488376cc7e8c6b18";
  }

  static const char* value(const ::final_project::CentroidResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e6be3035fdb6995ULL;
  static const uint64_t static_value2 = 0x488376cc7e8c6b18ULL;
};

template<class ContainerAllocator>
struct DataType< ::final_project::CentroidResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "final_project/CentroidResponse";
  }

  static const char* value(const ::final_project::CentroidResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::final_project::CentroidResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Bool foundCentroid\n"
"geometry_msgs/Point centroid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::final_project::CentroidResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::final_project::CentroidResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.foundCentroid);
      stream.next(m.centroid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CentroidResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::final_project::CentroidResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::final_project::CentroidResponse_<ContainerAllocator>& v)
  {
    s << indent << "foundCentroid: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.foundCentroid);
    s << indent << "centroid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.centroid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FINAL_PROJECT_MESSAGE_CENTROIDRESPONSE_H
