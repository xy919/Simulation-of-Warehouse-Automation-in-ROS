;; Auto-generated. Do not edit!


(when (boundp 'flexbe_msgs::BehaviorSynthesisResult)
  (if (not (find-package "FLEXBE_MSGS"))
    (make-package "FLEXBE_MSGS"))
  (shadow 'BehaviorSynthesisResult (find-package "FLEXBE_MSGS")))
(unless (find-package "FLEXBE_MSGS::BEHAVIORSYNTHESISRESULT")
  (make-package "FLEXBE_MSGS::BEHAVIORSYNTHESISRESULT"))

(in-package "ROS")
;;//! \htmlinclude BehaviorSynthesisResult.msg.html


(defclass flexbe_msgs::BehaviorSynthesisResult
  :super ros::object
  :slots (_error_code _states ))

(defmethod flexbe_msgs::BehaviorSynthesisResult
  (:init
   (&key
    ((:error_code __error_code) (instance flexbe_msgs::SynthesisErrorCodes :init))
    ((:states __states) (let (r) (dotimes (i 0) (push (instance flexbe_msgs::StateInstantiation :init) r)) r))
    )
   (send-super :init)
   (setq _error_code __error_code)
   (setq _states __states)
   self)
  (:error_code
   (&rest __error_code)
   (if (keywordp (car __error_code))
       (send* _error_code __error_code)
     (progn
       (if __error_code (setq _error_code (car __error_code)))
       _error_code)))
  (:states
   (&rest __states)
   (if (keywordp (car __states))
       (send* _states __states)
     (progn
       (if __states (setq _states (car __states)))
       _states)))
  (:serialization-length
   ()
   (+
    ;; flexbe_msgs/SynthesisErrorCodes _error_code
    (send _error_code :serialization-length)
    ;; flexbe_msgs/StateInstantiation[] _states
    (apply #'+ (send-all _states :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; flexbe_msgs/SynthesisErrorCodes _error_code
       (send _error_code :serialize s)
     ;; flexbe_msgs/StateInstantiation[] _states
     (write-long (length _states) s)
     (dolist (elem _states)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; flexbe_msgs/SynthesisErrorCodes _error_code
     (send _error_code :deserialize buf ptr-) (incf ptr- (send _error_code :serialization-length))
   ;; flexbe_msgs/StateInstantiation[] _states
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _states (let (r) (dotimes (i n) (push (instance flexbe_msgs::StateInstantiation :init) r)) r))
     (dolist (elem- _states)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get flexbe_msgs::BehaviorSynthesisResult :md5sum-) "088bd6aee1c7ee2902db2babfd6af1c2")
(setf (get flexbe_msgs::BehaviorSynthesisResult :datatype-) "flexbe_msgs/BehaviorSynthesisResult")
(setf (get flexbe_msgs::BehaviorSynthesisResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# Provides feedback regarding possibly occured errors
SynthesisErrorCodes error_code

# Result of behavior synthesis as a list of state instantiations
StateInstantiation[] states


================================================================================
MSG: flexbe_msgs/SynthesisErrorCodes
int32 value

# success
int32 SUCCESS = 1

# all other values will be considered as any sort of error
================================================================================
MSG: flexbe_msgs/StateInstantiation
# Describes a single instantiation of a state

# Path of this state inside the behavior
# Last segment of the path is the name of this state
# e.g. \"/Inner_Statemachine/This_State\"
string state_path

# Specifies the class implementing this state
# Use one of the provided CLASS constants if this is not a primitive state
# e.g. \"CalculationState\"
string CLASS_STATEMACHINE 	= :STATEMACHINE
string CLASS_CONCURRENCY 	= :CONCURRENCY
string CLASS_PRIORITY 		= :PRIORITY
string CLASS_BEHAVIOR 		= :BEHAVIOR
string state_class



# Only relevant for state machine, priority, and concurrency
# Name of the initial state / state to be monitored
string initial_state_name
# Input and output keys (can be remapped below)
string[] input_keys
string[] output_keys

# Only relevant for concurrency
# Outcome conditions
string[] cond_outcome
OutcomeCondition[] cond_transition

# Only relevant for behavior
# Name of the class implementing this state
string behavior_class

# Only relevant for primitive state
# List of parameter names and values of this state
# Order of names and values has to match
string[] parameter_names
string[] parameter_values



# Position of this state in the editor [x,y]
float32[2] position

# Outcomes of this state
# Defines the order of the lists: transitions, autonomy
string[] outcomes
# Transition targets (state names or container outcomes) of the outcomes
string[] transitions
# Required autonomy level of the outcomes
int8[] autonomy

# Userdata of this state
# Merges own input_keys and output_keys, no duplicates
string[] userdata_keys
# Remapping of the corresponding own key (= key used by container)
string[] userdata_remapping
================================================================================
MSG: flexbe_msgs/OutcomeCondition
# Defines a conjunction of required state outcomes in order to return a concurrency outcome
string[] state_name
string[] state_outcome
")



(provide :flexbe_msgs/BehaviorSynthesisResult "088bd6aee1c7ee2902db2babfd6af1c2")


