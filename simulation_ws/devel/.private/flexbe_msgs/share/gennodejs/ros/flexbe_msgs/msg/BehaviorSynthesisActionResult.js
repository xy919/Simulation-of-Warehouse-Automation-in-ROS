// Auto-generated. Do not edit!

// (in-package flexbe_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let BehaviorSynthesisResult = require('./BehaviorSynthesisResult.js');
let actionlib_msgs = _finder('actionlib_msgs');
let std_msgs = _finder('std_msgs');

//-----------------------------------------------------------

class BehaviorSynthesisActionResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.header = null;
      this.status = null;
      this.result = null;
    }
    else {
      if (initObj.hasOwnProperty('header')) {
        this.header = initObj.header
      }
      else {
        this.header = new std_msgs.msg.Header();
      }
      if (initObj.hasOwnProperty('status')) {
        this.status = initObj.status
      }
      else {
        this.status = new actionlib_msgs.msg.GoalStatus();
      }
      if (initObj.hasOwnProperty('result')) {
        this.result = initObj.result
      }
      else {
        this.result = new BehaviorSynthesisResult();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type BehaviorSynthesisActionResult
    // Serialize message field [header]
    bufferOffset = std_msgs.msg.Header.serialize(obj.header, buffer, bufferOffset);
    // Serialize message field [status]
    bufferOffset = actionlib_msgs.msg.GoalStatus.serialize(obj.status, buffer, bufferOffset);
    // Serialize message field [result]
    bufferOffset = BehaviorSynthesisResult.serialize(obj.result, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type BehaviorSynthesisActionResult
    let len;
    let data = new BehaviorSynthesisActionResult(null);
    // Deserialize message field [header]
    data.header = std_msgs.msg.Header.deserialize(buffer, bufferOffset);
    // Deserialize message field [status]
    data.status = actionlib_msgs.msg.GoalStatus.deserialize(buffer, bufferOffset);
    // Deserialize message field [result]
    data.result = BehaviorSynthesisResult.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += std_msgs.msg.Header.getMessageSize(object.header);
    length += actionlib_msgs.msg.GoalStatus.getMessageSize(object.status);
    length += BehaviorSynthesisResult.getMessageSize(object.result);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'flexbe_msgs/BehaviorSynthesisActionResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'd13a1c24e611f3c8aae59d09829d044b';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    BehaviorSynthesisResult result
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: flexbe_msgs/BehaviorSynthesisResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    # Provides feedback regarding possibly occured errors
    SynthesisErrorCodes error_code
    
    # Result of behavior synthesis as a list of state instantiations
    StateInstantiation[] states
    
    
    ================================================================================
    MSG: flexbe_msgs/SynthesisErrorCodes
    int32 value
    
    # success
    int32 SUCCESS = 1
    
    # all other values will be considered as any sort of error
    ================================================================================
    MSG: flexbe_msgs/StateInstantiation
    # Describes a single instantiation of a state
    
    # Path of this state inside the behavior
    # Last segment of the path is the name of this state
    # e.g. "/Inner_Statemachine/This_State"
    string state_path
    
    # Specifies the class implementing this state
    # Use one of the provided CLASS constants if this is not a primitive state
    # e.g. "CalculationState"
    string CLASS_STATEMACHINE 	= :STATEMACHINE
    string CLASS_CONCURRENCY 	= :CONCURRENCY
    string CLASS_PRIORITY 		= :PRIORITY
    string CLASS_BEHAVIOR 		= :BEHAVIOR
    string state_class
    
    
    
    # Only relevant for state machine, priority, and concurrency
    # Name of the initial state / state to be monitored
    string initial_state_name
    # Input and output keys (can be remapped below)
    string[] input_keys
    string[] output_keys
    
    # Only relevant for concurrency
    # Outcome conditions
    string[] cond_outcome
    OutcomeCondition[] cond_transition
    
    # Only relevant for behavior
    # Name of the class implementing this state
    string behavior_class
    
    # Only relevant for primitive state
    # List of parameter names and values of this state
    # Order of names and values has to match
    string[] parameter_names
    string[] parameter_values
    
    
    
    # Position of this state in the editor [x,y]
    float32[2] position
    
    # Outcomes of this state
    # Defines the order of the lists: transitions, autonomy
    string[] outcomes
    # Transition targets (state names or container outcomes) of the outcomes
    string[] transitions
    # Required autonomy level of the outcomes
    int8[] autonomy
    
    # Userdata of this state
    # Merges own input_keys and output_keys, no duplicates
    string[] userdata_keys
    # Remapping of the corresponding own key (= key used by container)
    string[] userdata_remapping
    ================================================================================
    MSG: flexbe_msgs/OutcomeCondition
    # Defines a conjunction of required state outcomes in order to return a concurrency outcome
    string[] state_name
    string[] state_outcome
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new BehaviorSynthesisActionResult(null);
    if (msg.header !== undefined) {
      resolved.header = std_msgs.msg.Header.Resolve(msg.header)
    }
    else {
      resolved.header = new std_msgs.msg.Header()
    }

    if (msg.status !== undefined) {
      resolved.status = actionlib_msgs.msg.GoalStatus.Resolve(msg.status)
    }
    else {
      resolved.status = new actionlib_msgs.msg.GoalStatus()
    }

    if (msg.result !== undefined) {
      resolved.result = BehaviorSynthesisResult.Resolve(msg.result)
    }
    else {
      resolved.result = new BehaviorSynthesisResult()
    }

    return resolved;
    }
};

module.exports = BehaviorSynthesisActionResult;
