; Auto-generated. Do not edit!


(cl:in-package flexbe_msgs-msg)


;//! \htmlinclude BehaviorSynthesisResult.msg.html

(cl:defclass <BehaviorSynthesisResult> (roslisp-msg-protocol:ros-message)
  ((error_code
    :reader error_code
    :initarg :error_code
    :type flexbe_msgs-msg:SynthesisErrorCodes
    :initform (cl:make-instance 'flexbe_msgs-msg:SynthesisErrorCodes))
   (states
    :reader states
    :initarg :states
    :type (cl:vector flexbe_msgs-msg:StateInstantiation)
   :initform (cl:make-array 0 :element-type 'flexbe_msgs-msg:StateInstantiation :initial-element (cl:make-instance 'flexbe_msgs-msg:StateInstantiation))))
)

(cl:defclass BehaviorSynthesisResult (<BehaviorSynthesisResult>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <BehaviorSynthesisResult>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'BehaviorSynthesisResult)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name flexbe_msgs-msg:<BehaviorSynthesisResult> is deprecated: use flexbe_msgs-msg:BehaviorSynthesisResult instead.")))

(cl:ensure-generic-function 'error_code-val :lambda-list '(m))
(cl:defmethod error_code-val ((m <BehaviorSynthesisResult>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader flexbe_msgs-msg:error_code-val is deprecated.  Use flexbe_msgs-msg:error_code instead.")
  (error_code m))

(cl:ensure-generic-function 'states-val :lambda-list '(m))
(cl:defmethod states-val ((m <BehaviorSynthesisResult>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader flexbe_msgs-msg:states-val is deprecated.  Use flexbe_msgs-msg:states instead.")
  (states m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <BehaviorSynthesisResult>) ostream)
  "Serializes a message object of type '<BehaviorSynthesisResult>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'error_code) ostream)
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'states))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'states))
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <BehaviorSynthesisResult>) istream)
  "Deserializes a message object of type '<BehaviorSynthesisResult>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'error_code) istream)
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'states) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'states)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'flexbe_msgs-msg:StateInstantiation))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<BehaviorSynthesisResult>)))
  "Returns string type for a message object of type '<BehaviorSynthesisResult>"
  "flexbe_msgs/BehaviorSynthesisResult")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'BehaviorSynthesisResult)))
  "Returns string type for a message object of type 'BehaviorSynthesisResult"
  "flexbe_msgs/BehaviorSynthesisResult")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<BehaviorSynthesisResult>)))
  "Returns md5sum for a message object of type '<BehaviorSynthesisResult>"
  "088bd6aee1c7ee2902db2babfd6af1c2")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'BehaviorSynthesisResult)))
  "Returns md5sum for a message object of type 'BehaviorSynthesisResult"
  "088bd6aee1c7ee2902db2babfd6af1c2")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<BehaviorSynthesisResult>)))
  "Returns full string definition for message of type '<BehaviorSynthesisResult>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%# Provides feedback regarding possibly occured errors~%SynthesisErrorCodes error_code~%~%# Result of behavior synthesis as a list of state instantiations~%StateInstantiation[] states~%~%~%================================================================================~%MSG: flexbe_msgs/SynthesisErrorCodes~%int32 value~%~%# success~%int32 SUCCESS = 1~%~%# all other values will be considered as any sort of error~%================================================================================~%MSG: flexbe_msgs/StateInstantiation~%# Describes a single instantiation of a state~%~%# Path of this state inside the behavior~%# Last segment of the path is the name of this state~%# e.g. \"/Inner_Statemachine/This_State\"~%string state_path~%~%# Specifies the class implementing this state~%# Use one of the provided CLASS constants if this is not a primitive state~%# e.g. \"CalculationState\"~%string CLASS_STATEMACHINE 	= :STATEMACHINE~%string CLASS_CONCURRENCY 	= :CONCURRENCY~%string CLASS_PRIORITY 		= :PRIORITY~%string CLASS_BEHAVIOR 		= :BEHAVIOR~%string state_class~%~%~%~%# Only relevant for state machine, priority, and concurrency~%# Name of the initial state / state to be monitored~%string initial_state_name~%# Input and output keys (can be remapped below)~%string[] input_keys~%string[] output_keys~%~%# Only relevant for concurrency~%# Outcome conditions~%string[] cond_outcome~%OutcomeCondition[] cond_transition~%~%# Only relevant for behavior~%# Name of the class implementing this state~%string behavior_class~%~%# Only relevant for primitive state~%# List of parameter names and values of this state~%# Order of names and values has to match~%string[] parameter_names~%string[] parameter_values~%~%~%~%# Position of this state in the editor [x,y]~%float32[2] position~%~%# Outcomes of this state~%# Defines the order of the lists: transitions, autonomy~%string[] outcomes~%# Transition targets (state names or container outcomes) of the outcomes~%string[] transitions~%# Required autonomy level of the outcomes~%int8[] autonomy~%~%# Userdata of this state~%# Merges own input_keys and output_keys, no duplicates~%string[] userdata_keys~%# Remapping of the corresponding own key (= key used by container)~%string[] userdata_remapping~%================================================================================~%MSG: flexbe_msgs/OutcomeCondition~%# Defines a conjunction of required state outcomes in order to return a concurrency outcome~%string[] state_name~%string[] state_outcome~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'BehaviorSynthesisResult)))
  "Returns full string definition for message of type 'BehaviorSynthesisResult"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%# Provides feedback regarding possibly occured errors~%SynthesisErrorCodes error_code~%~%# Result of behavior synthesis as a list of state instantiations~%StateInstantiation[] states~%~%~%================================================================================~%MSG: flexbe_msgs/SynthesisErrorCodes~%int32 value~%~%# success~%int32 SUCCESS = 1~%~%# all other values will be considered as any sort of error~%================================================================================~%MSG: flexbe_msgs/StateInstantiation~%# Describes a single instantiation of a state~%~%# Path of this state inside the behavior~%# Last segment of the path is the name of this state~%# e.g. \"/Inner_Statemachine/This_State\"~%string state_path~%~%# Specifies the class implementing this state~%# Use one of the provided CLASS constants if this is not a primitive state~%# e.g. \"CalculationState\"~%string CLASS_STATEMACHINE 	= :STATEMACHINE~%string CLASS_CONCURRENCY 	= :CONCURRENCY~%string CLASS_PRIORITY 		= :PRIORITY~%string CLASS_BEHAVIOR 		= :BEHAVIOR~%string state_class~%~%~%~%# Only relevant for state machine, priority, and concurrency~%# Name of the initial state / state to be monitored~%string initial_state_name~%# Input and output keys (can be remapped below)~%string[] input_keys~%string[] output_keys~%~%# Only relevant for concurrency~%# Outcome conditions~%string[] cond_outcome~%OutcomeCondition[] cond_transition~%~%# Only relevant for behavior~%# Name of the class implementing this state~%string behavior_class~%~%# Only relevant for primitive state~%# List of parameter names and values of this state~%# Order of names and values has to match~%string[] parameter_names~%string[] parameter_values~%~%~%~%# Position of this state in the editor [x,y]~%float32[2] position~%~%# Outcomes of this state~%# Defines the order of the lists: transitions, autonomy~%string[] outcomes~%# Transition targets (state names or container outcomes) of the outcomes~%string[] transitions~%# Required autonomy level of the outcomes~%int8[] autonomy~%~%# Userdata of this state~%# Merges own input_keys and output_keys, no duplicates~%string[] userdata_keys~%# Remapping of the corresponding own key (= key used by container)~%string[] userdata_remapping~%================================================================================~%MSG: flexbe_msgs/OutcomeCondition~%# Defines a conjunction of required state outcomes in order to return a concurrency outcome~%string[] state_name~%string[] state_outcome~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <BehaviorSynthesisResult>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'error_code))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'states) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <BehaviorSynthesisResult>))
  "Converts a ROS message object to a list"
  (cl:list 'BehaviorSynthesisResult
    (cl:cons ':error_code (error_code msg))
    (cl:cons ':states (states msg))
))
