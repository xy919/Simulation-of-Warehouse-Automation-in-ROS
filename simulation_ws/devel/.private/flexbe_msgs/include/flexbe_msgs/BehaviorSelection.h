// Generated by gencpp from file flexbe_msgs/BehaviorSelection.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_BEHAVIORSELECTION_H
#define FLEXBE_MSGS_MESSAGE_BEHAVIORSELECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <flexbe_msgs/BehaviorModification.h>

namespace flexbe_msgs
{
template <class ContainerAllocator>
struct BehaviorSelection_
{
  typedef BehaviorSelection_<ContainerAllocator> Type;

  BehaviorSelection_()
    : behavior_id(0)
    , behavior_checksum(0)
    , autonomy_level(0)
    , arg_keys()
    , arg_values()
    , input_keys()
    , input_values()
    , modifications()  {
    }
  BehaviorSelection_(const ContainerAllocator& _alloc)
    : behavior_id(0)
    , behavior_checksum(0)
    , autonomy_level(0)
    , arg_keys(_alloc)
    , arg_values(_alloc)
    , input_keys(_alloc)
    , input_values(_alloc)
    , modifications(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _behavior_id_type;
  _behavior_id_type behavior_id;

   typedef int32_t _behavior_checksum_type;
  _behavior_checksum_type behavior_checksum;

   typedef uint8_t _autonomy_level_type;
  _autonomy_level_type autonomy_level;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _arg_keys_type;
  _arg_keys_type arg_keys;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _arg_values_type;
  _arg_values_type arg_values;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _input_keys_type;
  _input_keys_type input_keys;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _input_values_type;
  _input_values_type input_values;

   typedef std::vector< ::flexbe_msgs::BehaviorModification_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::flexbe_msgs::BehaviorModification_<ContainerAllocator> >::other >  _modifications_type;
  _modifications_type modifications;





  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorSelection_

typedef ::flexbe_msgs::BehaviorSelection_<std::allocator<void> > BehaviorSelection;

typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSelection > BehaviorSelectionPtr;
typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSelection const> BehaviorSelectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexbe_msgs::BehaviorSelection_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorSelection_<ContainerAllocator2> & rhs)
{
  return lhs.behavior_id == rhs.behavior_id &&
    lhs.behavior_checksum == rhs.behavior_checksum &&
    lhs.autonomy_level == rhs.autonomy_level &&
    lhs.arg_keys == rhs.arg_keys &&
    lhs.arg_values == rhs.arg_values &&
    lhs.input_keys == rhs.input_keys &&
    lhs.input_values == rhs.input_values &&
    lhs.modifications == rhs.modifications;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexbe_msgs::BehaviorSelection_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorSelection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "514f1b101295bdbd417ee6cc46e3823c";
  }

  static const char* value(const ::flexbe_msgs::BehaviorSelection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x514f1b101295bdbdULL;
  static const uint64_t static_value2 = 0x417ee6cc46e3823cULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/BehaviorSelection";
  }

  static const char* value(const ::flexbe_msgs::BehaviorSelection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 behavior_id\n"
"int32 behavior_checksum\n"
"\n"
"uint8 autonomy_level\n"
"string[] arg_keys\n"
"string[] arg_values\n"
"\n"
"string[] input_keys\n"
"string[] input_values\n"
"\n"
"flexbe_msgs/BehaviorModification[] modifications\n"
"================================================================================\n"
"MSG: flexbe_msgs/BehaviorModification\n"
"int32 index_begin\n"
"int32 index_end\n"
"string new_content\n"
;
  }

  static const char* value(const ::flexbe_msgs::BehaviorSelection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.behavior_id);
      stream.next(m.behavior_checksum);
      stream.next(m.autonomy_level);
      stream.next(m.arg_keys);
      stream.next(m.arg_values);
      stream.next(m.input_keys);
      stream.next(m.input_values);
      stream.next(m.modifications);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorSelection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::BehaviorSelection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::BehaviorSelection_<ContainerAllocator>& v)
  {
    s << indent << "behavior_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behavior_id);
    s << indent << "behavior_checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behavior_checksum);
    s << indent << "autonomy_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autonomy_level);
    s << indent << "arg_keys[]" << std::endl;
    for (size_t i = 0; i < v.arg_keys.size(); ++i)
    {
      s << indent << "  arg_keys[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arg_keys[i]);
    }
    s << indent << "arg_values[]" << std::endl;
    for (size_t i = 0; i < v.arg_values.size(); ++i)
    {
      s << indent << "  arg_values[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arg_values[i]);
    }
    s << indent << "input_keys[]" << std::endl;
    for (size_t i = 0; i < v.input_keys.size(); ++i)
    {
      s << indent << "  input_keys[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.input_keys[i]);
    }
    s << indent << "input_values[]" << std::endl;
    for (size_t i = 0; i < v.input_values.size(); ++i)
    {
      s << indent << "  input_values[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.input_values[i]);
    }
    s << indent << "modifications[]" << std::endl;
    for (size_t i = 0; i < v.modifications.size(); ++i)
    {
      s << indent << "  modifications[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::flexbe_msgs::BehaviorModification_<ContainerAllocator> >::stream(s, indent + "    ", v.modifications[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_BEHAVIORSELECTION_H
