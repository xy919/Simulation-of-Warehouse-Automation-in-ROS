// Generated by gencpp from file flexbe_msgs/BehaviorSynthesisGoal.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_BEHAVIORSYNTHESISGOAL_H
#define FLEXBE_MSGS_MESSAGE_BEHAVIORSYNTHESISGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <flexbe_msgs/SynthesisRequest.h>

namespace flexbe_msgs
{
template <class ContainerAllocator>
struct BehaviorSynthesisGoal_
{
  typedef BehaviorSynthesisGoal_<ContainerAllocator> Type;

  BehaviorSynthesisGoal_()
    : request()  {
    }
  BehaviorSynthesisGoal_(const ContainerAllocator& _alloc)
    : request(_alloc)  {
  (void)_alloc;
    }



   typedef  ::flexbe_msgs::SynthesisRequest_<ContainerAllocator>  _request_type;
  _request_type request;





  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorSynthesisGoal_

typedef ::flexbe_msgs::BehaviorSynthesisGoal_<std::allocator<void> > BehaviorSynthesisGoal;

typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisGoal > BehaviorSynthesisGoalPtr;
typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisGoal const> BehaviorSynthesisGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator2> & rhs)
{
  return lhs.request == rhs.request;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64ccf8fdad6091a950ca099bc67e6595";
  }

  static const char* value(const ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64ccf8fdad6091a9ULL;
  static const uint64_t static_value2 = 0x50ca099bc67e6595ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/BehaviorSynthesisGoal";
  }

  static const char* value(const ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Minimal template for a behavior synthesis action.\n"
"# As long as your action type supports at least the fields listed below, you can also use a custom one.\n"
"\n"
"# Request message as set in the FlexBE UI\n"
"SynthesisRequest request\n"
"\n"
"\n"
"================================================================================\n"
"MSG: flexbe_msgs/SynthesisRequest\n"
"# Minimal template for the request data provided by the FlexBE synthesis interface.\n"
"# Either refer this message as 'request' in the goal part of your synthesis action\n"
"# or implement your own by at least supporting the fields listed below.\n"
"\n"
"# Identifier of this synthesis query, can for example be used to set the name of the resulting state machine\n"
"string name\n"
"\n"
"# Identifier of the system (i.e., configuration data set) to be used by the synthesis tool\n"
"string system\n"
"\n"
"# Goal to be achieved by the synthesized behavior\n"
"string goal\n"
"\n"
"# Initial conditions from which the synthesized behavior will start\n"
"string initial_condition\n"
"\n"
"# Available outcomes of the generated state machine,\n"
"# i.e., possible results of the synthesized behavior\n"
"string[] sm_outcomes\n"
;
  }

  static const char* value(const ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorSynthesisGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::BehaviorSynthesisGoal_<ContainerAllocator>& v)
  {
    s << indent << "request: ";
    s << std::endl;
    Printer< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> >::stream(s, indent + "  ", v.request);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_BEHAVIORSYNTHESISGOAL_H
