// Generated by gencpp from file flexbe_msgs/Container.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_CONTAINER_H
#define FLEXBE_MSGS_MESSAGE_CONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flexbe_msgs
{
template <class ContainerAllocator>
struct Container_
{
  typedef Container_<ContainerAllocator> Type;

  Container_()
    : path()
    , children()
    , outcomes()
    , transitions()
    , autonomy()  {
    }
  Container_(const ContainerAllocator& _alloc)
    : path(_alloc)
    , children(_alloc)
    , outcomes(_alloc)
    , transitions(_alloc)
    , autonomy(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _path_type;
  _path_type path;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _children_type;
  _children_type children;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _outcomes_type;
  _outcomes_type outcomes;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _transitions_type;
  _transitions_type transitions;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _autonomy_type;
  _autonomy_type autonomy;





  typedef boost::shared_ptr< ::flexbe_msgs::Container_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::Container_<ContainerAllocator> const> ConstPtr;

}; // struct Container_

typedef ::flexbe_msgs::Container_<std::allocator<void> > Container;

typedef boost::shared_ptr< ::flexbe_msgs::Container > ContainerPtr;
typedef boost::shared_ptr< ::flexbe_msgs::Container const> ContainerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::Container_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::Container_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexbe_msgs::Container_<ContainerAllocator1> & lhs, const ::flexbe_msgs::Container_<ContainerAllocator2> & rhs)
{
  return lhs.path == rhs.path &&
    lhs.children == rhs.children &&
    lhs.outcomes == rhs.outcomes &&
    lhs.transitions == rhs.transitions &&
    lhs.autonomy == rhs.autonomy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexbe_msgs::Container_<ContainerAllocator1> & lhs, const ::flexbe_msgs::Container_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::Container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::Container_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::Container_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::Container_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::Container_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::Container_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::Container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "627eacc0f462c8ee83d7105e17cf4119";
  }

  static const char* value(const ::flexbe_msgs::Container_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x627eacc0f462c8eeULL;
  static const uint64_t static_value2 = 0x83d7105e17cf4119ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::Container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/Container";
  }

  static const char* value(const ::flexbe_msgs::Container_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::Container_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string path\n"
"string[] children\n"
"string[] outcomes\n"
"string[] transitions\n"
"byte[] autonomy\n"
;
  }

  static const char* value(const ::flexbe_msgs::Container_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::Container_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path);
      stream.next(m.children);
      stream.next(m.outcomes);
      stream.next(m.transitions);
      stream.next(m.autonomy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Container_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::Container_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::Container_<ContainerAllocator>& v)
  {
    s << indent << "path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.path);
    s << indent << "children[]" << std::endl;
    for (size_t i = 0; i < v.children.size(); ++i)
    {
      s << indent << "  children[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.children[i]);
    }
    s << indent << "outcomes[]" << std::endl;
    for (size_t i = 0; i < v.outcomes.size(); ++i)
    {
      s << indent << "  outcomes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.outcomes[i]);
    }
    s << indent << "transitions[]" << std::endl;
    for (size_t i = 0; i < v.transitions.size(); ++i)
    {
      s << indent << "  transitions[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.transitions[i]);
    }
    s << indent << "autonomy[]" << std::endl;
    for (size_t i = 0; i < v.autonomy.size(); ++i)
    {
      s << indent << "  autonomy[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.autonomy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_CONTAINER_H
