// Generated by gencpp from file flexbe_msgs/SynthesisRequest.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_SYNTHESISREQUEST_H
#define FLEXBE_MSGS_MESSAGE_SYNTHESISREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flexbe_msgs
{
template <class ContainerAllocator>
struct SynthesisRequest_
{
  typedef SynthesisRequest_<ContainerAllocator> Type;

  SynthesisRequest_()
    : name()
    , system()
    , goal()
    , initial_condition()
    , sm_outcomes()  {
    }
  SynthesisRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , system(_alloc)
    , goal(_alloc)
    , initial_condition(_alloc)
    , sm_outcomes(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _system_type;
  _system_type system;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_type;
  _goal_type goal;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _initial_condition_type;
  _initial_condition_type initial_condition;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _sm_outcomes_type;
  _sm_outcomes_type sm_outcomes;





  typedef boost::shared_ptr< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SynthesisRequest_

typedef ::flexbe_msgs::SynthesisRequest_<std::allocator<void> > SynthesisRequest;

typedef boost::shared_ptr< ::flexbe_msgs::SynthesisRequest > SynthesisRequestPtr;
typedef boost::shared_ptr< ::flexbe_msgs::SynthesisRequest const> SynthesisRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexbe_msgs::SynthesisRequest_<ContainerAllocator1> & lhs, const ::flexbe_msgs::SynthesisRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.system == rhs.system &&
    lhs.goal == rhs.goal &&
    lhs.initial_condition == rhs.initial_condition &&
    lhs.sm_outcomes == rhs.sm_outcomes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexbe_msgs::SynthesisRequest_<ContainerAllocator1> & lhs, const ::flexbe_msgs::SynthesisRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99257dbfe8a196d006a75837dcabf3f6";
  }

  static const char* value(const ::flexbe_msgs::SynthesisRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99257dbfe8a196d0ULL;
  static const uint64_t static_value2 = 0x06a75837dcabf3f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/SynthesisRequest";
  }

  static const char* value(const ::flexbe_msgs::SynthesisRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Minimal template for the request data provided by the FlexBE synthesis interface.\n"
"# Either refer this message as 'request' in the goal part of your synthesis action\n"
"# or implement your own by at least supporting the fields listed below.\n"
"\n"
"# Identifier of this synthesis query, can for example be used to set the name of the resulting state machine\n"
"string name\n"
"\n"
"# Identifier of the system (i.e., configuration data set) to be used by the synthesis tool\n"
"string system\n"
"\n"
"# Goal to be achieved by the synthesized behavior\n"
"string goal\n"
"\n"
"# Initial conditions from which the synthesized behavior will start\n"
"string initial_condition\n"
"\n"
"# Available outcomes of the generated state machine,\n"
"# i.e., possible results of the synthesized behavior\n"
"string[] sm_outcomes\n"
;
  }

  static const char* value(const ::flexbe_msgs::SynthesisRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.system);
      stream.next(m.goal);
      stream.next(m.initial_condition);
      stream.next(m.sm_outcomes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SynthesisRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::SynthesisRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::SynthesisRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "system: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.system);
    s << indent << "goal: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal);
    s << indent << "initial_condition: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.initial_condition);
    s << indent << "sm_outcomes[]" << std::endl;
    for (size_t i = 0; i < v.sm_outcomes.size(); ++i)
    {
      s << indent << "  sm_outcomes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sm_outcomes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_SYNTHESISREQUEST_H
