// Generated by gencpp from file flexbe_msgs/OutcomeCondition.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_OUTCOMECONDITION_H
#define FLEXBE_MSGS_MESSAGE_OUTCOMECONDITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flexbe_msgs
{
template <class ContainerAllocator>
struct OutcomeCondition_
{
  typedef OutcomeCondition_<ContainerAllocator> Type;

  OutcomeCondition_()
    : state_name()
    , state_outcome()  {
    }
  OutcomeCondition_(const ContainerAllocator& _alloc)
    : state_name(_alloc)
    , state_outcome(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _state_name_type;
  _state_name_type state_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _state_outcome_type;
  _state_outcome_type state_outcome;





  typedef boost::shared_ptr< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> const> ConstPtr;

}; // struct OutcomeCondition_

typedef ::flexbe_msgs::OutcomeCondition_<std::allocator<void> > OutcomeCondition;

typedef boost::shared_ptr< ::flexbe_msgs::OutcomeCondition > OutcomeConditionPtr;
typedef boost::shared_ptr< ::flexbe_msgs::OutcomeCondition const> OutcomeConditionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexbe_msgs::OutcomeCondition_<ContainerAllocator1> & lhs, const ::flexbe_msgs::OutcomeCondition_<ContainerAllocator2> & rhs)
{
  return lhs.state_name == rhs.state_name &&
    lhs.state_outcome == rhs.state_outcome;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexbe_msgs::OutcomeCondition_<ContainerAllocator1> & lhs, const ::flexbe_msgs::OutcomeCondition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f00d7f2d34167712ca29ef288547863";
  }

  static const char* value(const ::flexbe_msgs::OutcomeCondition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f00d7f2d3416771ULL;
  static const uint64_t static_value2 = 0x2ca29ef288547863ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/OutcomeCondition";
  }

  static const char* value(const ::flexbe_msgs::OutcomeCondition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Defines a conjunction of required state outcomes in order to return a concurrency outcome\n"
"string[] state_name\n"
"string[] state_outcome\n"
;
  }

  static const char* value(const ::flexbe_msgs::OutcomeCondition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_name);
      stream.next(m.state_outcome);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OutcomeCondition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::OutcomeCondition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::OutcomeCondition_<ContainerAllocator>& v)
  {
    s << indent << "state_name[]" << std::endl;
    for (size_t i = 0; i < v.state_name.size(); ++i)
    {
      s << indent << "  state_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_name[i]);
    }
    s << indent << "state_outcome[]" << std::endl;
    for (size_t i = 0; i < v.state_outcome.size(); ++i)
    {
      s << indent << "  state_outcome[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_outcome[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_OUTCOMECONDITION_H
