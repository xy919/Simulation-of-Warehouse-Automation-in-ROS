// Generated by gencpp from file flexbe_msgs/BEStatus.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_BESTATUS_H
#define FLEXBE_MSGS_MESSAGE_BESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flexbe_msgs
{
template <class ContainerAllocator>
struct BEStatus_
{
  typedef BEStatus_<ContainerAllocator> Type;

  BEStatus_()
    : stamp()
    , behavior_id(0)
    , code(0)
    , args()  {
    }
  BEStatus_(const ContainerAllocator& _alloc)
    : stamp()
    , behavior_id(0)
    , code(0)
    , args(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _behavior_id_type;
  _behavior_id_type behavior_id;

   typedef uint8_t _code_type;
  _code_type code;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _args_type;
  _args_type args;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STARTED)
  #undef STARTED
#endif
#if defined(_WIN32) && defined(FINISHED)
  #undef FINISHED
#endif
#if defined(_WIN32) && defined(FAILED)
  #undef FAILED
#endif
#if defined(_WIN32) && defined(LOCKED)
  #undef LOCKED
#endif
#if defined(_WIN32) && defined(WAITING)
  #undef WAITING
#endif
#if defined(_WIN32) && defined(SWITCHING)
  #undef SWITCHING
#endif
#if defined(_WIN32) && defined(WARNING)
  #undef WARNING
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(READY)
  #undef READY
#endif

  enum {
    STARTED = 0u,
    FINISHED = 1u,
    FAILED = 2u,
    LOCKED = 4u,
    WAITING = 5u,
    SWITCHING = 6u,
    WARNING = 10u,
    ERROR = 11u,
    READY = 20u,
  };


  typedef boost::shared_ptr< ::flexbe_msgs::BEStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::BEStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BEStatus_

typedef ::flexbe_msgs::BEStatus_<std::allocator<void> > BEStatus;

typedef boost::shared_ptr< ::flexbe_msgs::BEStatus > BEStatusPtr;
typedef boost::shared_ptr< ::flexbe_msgs::BEStatus const> BEStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::BEStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::BEStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexbe_msgs::BEStatus_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BEStatus_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.behavior_id == rhs.behavior_id &&
    lhs.code == rhs.code &&
    lhs.args == rhs.args;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexbe_msgs::BEStatus_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BEStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BEStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BEStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BEStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BEStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BEStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BEStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::BEStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "467355de4ad406f864268f41621cb885";
  }

  static const char* value(const ::flexbe_msgs::BEStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x467355de4ad406f8ULL;
  static const uint64_t static_value2 = 0x64268f41621cb885ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::BEStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/BEStatus";
  }

  static const char* value(const ::flexbe_msgs::BEStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::BEStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Behavior Status\n"
"uint8 STARTED = 0\n"
"uint8 FINISHED = 1\n"
"uint8 FAILED = 2\n"
"\n"
"uint8 LOCKED = 4\n"
"uint8 WAITING = 5\n"
"uint8 SWITCHING = 6\n"
"\n"
"# General problems\n"
"uint8 WARNING = 10\n"
"uint8 ERROR = 11\n"
"\n"
"# Engine Status\n"
"uint8 READY = 20\n"
"\n"
"time stamp\n"
"int32 behavior_id\n"
"uint8 code\n"
"\n"
"string[] args\n"
;
  }

  static const char* value(const ::flexbe_msgs::BEStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::BEStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.behavior_id);
      stream.next(m.code);
      stream.next(m.args);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BEStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::BEStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::BEStatus_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "behavior_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behavior_id);
    s << indent << "code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.code);
    s << indent << "args[]" << std::endl;
    for (size_t i = 0; i < v.args.size(); ++i)
    {
      s << indent << "  args[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.args[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_BESTATUS_H
