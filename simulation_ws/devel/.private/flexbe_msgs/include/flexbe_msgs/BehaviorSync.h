// Generated by gencpp from file flexbe_msgs/BehaviorSync.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_BEHAVIORSYNC_H
#define FLEXBE_MSGS_MESSAGE_BEHAVIORSYNC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flexbe_msgs
{
template <class ContainerAllocator>
struct BehaviorSync_
{
  typedef BehaviorSync_<ContainerAllocator> Type;

  BehaviorSync_()
    : behavior_id(0)
    , current_state_checksum(0)  {
    }
  BehaviorSync_(const ContainerAllocator& _alloc)
    : behavior_id(0)
    , current_state_checksum(0)  {
  (void)_alloc;
    }



   typedef int32_t _behavior_id_type;
  _behavior_id_type behavior_id;

   typedef int32_t _current_state_checksum_type;
  _current_state_checksum_type current_state_checksum;





  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorSync_

typedef ::flexbe_msgs::BehaviorSync_<std::allocator<void> > BehaviorSync;

typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSync > BehaviorSyncPtr;
typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSync const> BehaviorSyncConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::BehaviorSync_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexbe_msgs::BehaviorSync_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorSync_<ContainerAllocator2> & rhs)
{
  return lhs.behavior_id == rhs.behavior_id &&
    lhs.current_state_checksum == rhs.current_state_checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexbe_msgs::BehaviorSync_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorSync_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> >
{
  static const char* value()
  {
    return "118d64f48696509906c4cf4a228608b1";
  }

  static const char* value(const ::flexbe_msgs::BehaviorSync_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x118d64f486965099ULL;
  static const uint64_t static_value2 = 0x06c4cf4a228608b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/BehaviorSync";
  }

  static const char* value(const ::flexbe_msgs::BehaviorSync_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 behavior_id\n"
"\n"
"int32 current_state_checksum\n"
;
  }

  static const char* value(const ::flexbe_msgs::BehaviorSync_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.behavior_id);
      stream.next(m.current_state_checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorSync_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::BehaviorSync_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::BehaviorSync_<ContainerAllocator>& v)
  {
    s << indent << "behavior_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behavior_id);
    s << indent << "current_state_checksum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_state_checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_BEHAVIORSYNC_H
