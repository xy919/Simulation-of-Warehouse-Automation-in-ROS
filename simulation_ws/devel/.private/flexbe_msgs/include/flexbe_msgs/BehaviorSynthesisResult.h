// Generated by gencpp from file flexbe_msgs/BehaviorSynthesisResult.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_BEHAVIORSYNTHESISRESULT_H
#define FLEXBE_MSGS_MESSAGE_BEHAVIORSYNTHESISRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <flexbe_msgs/SynthesisErrorCodes.h>
#include <flexbe_msgs/StateInstantiation.h>

namespace flexbe_msgs
{
template <class ContainerAllocator>
struct BehaviorSynthesisResult_
{
  typedef BehaviorSynthesisResult_<ContainerAllocator> Type;

  BehaviorSynthesisResult_()
    : error_code()
    , states()  {
    }
  BehaviorSynthesisResult_(const ContainerAllocator& _alloc)
    : error_code(_alloc)
    , states(_alloc)  {
  (void)_alloc;
    }



   typedef  ::flexbe_msgs::SynthesisErrorCodes_<ContainerAllocator>  _error_code_type;
  _error_code_type error_code;

   typedef std::vector< ::flexbe_msgs::StateInstantiation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::flexbe_msgs::StateInstantiation_<ContainerAllocator> >::other >  _states_type;
  _states_type states;





  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorSynthesisResult_

typedef ::flexbe_msgs::BehaviorSynthesisResult_<std::allocator<void> > BehaviorSynthesisResult;

typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisResult > BehaviorSynthesisResultPtr;
typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisResult const> BehaviorSynthesisResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator2> & rhs)
{
  return lhs.error_code == rhs.error_code &&
    lhs.states == rhs.states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "088bd6aee1c7ee2902db2babfd6af1c2";
  }

  static const char* value(const ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x088bd6aee1c7ee29ULL;
  static const uint64_t static_value2 = 0x02db2babfd6af1c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/BehaviorSynthesisResult";
  }

  static const char* value(const ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"# Provides feedback regarding possibly occured errors\n"
"SynthesisErrorCodes error_code\n"
"\n"
"# Result of behavior synthesis as a list of state instantiations\n"
"StateInstantiation[] states\n"
"\n"
"\n"
"================================================================================\n"
"MSG: flexbe_msgs/SynthesisErrorCodes\n"
"int32 value\n"
"\n"
"# success\n"
"int32 SUCCESS = 1\n"
"\n"
"# all other values will be considered as any sort of error\n"
"================================================================================\n"
"MSG: flexbe_msgs/StateInstantiation\n"
"# Describes a single instantiation of a state\n"
"\n"
"# Path of this state inside the behavior\n"
"# Last segment of the path is the name of this state\n"
"# e.g. \"/Inner_Statemachine/This_State\"\n"
"string state_path\n"
"\n"
"# Specifies the class implementing this state\n"
"# Use one of the provided CLASS constants if this is not a primitive state\n"
"# e.g. \"CalculationState\"\n"
"string CLASS_STATEMACHINE 	= :STATEMACHINE\n"
"string CLASS_CONCURRENCY 	= :CONCURRENCY\n"
"string CLASS_PRIORITY 		= :PRIORITY\n"
"string CLASS_BEHAVIOR 		= :BEHAVIOR\n"
"string state_class\n"
"\n"
"\n"
"\n"
"# Only relevant for state machine, priority, and concurrency\n"
"# Name of the initial state / state to be monitored\n"
"string initial_state_name\n"
"# Input and output keys (can be remapped below)\n"
"string[] input_keys\n"
"string[] output_keys\n"
"\n"
"# Only relevant for concurrency\n"
"# Outcome conditions\n"
"string[] cond_outcome\n"
"OutcomeCondition[] cond_transition\n"
"\n"
"# Only relevant for behavior\n"
"# Name of the class implementing this state\n"
"string behavior_class\n"
"\n"
"# Only relevant for primitive state\n"
"# List of parameter names and values of this state\n"
"# Order of names and values has to match\n"
"string[] parameter_names\n"
"string[] parameter_values\n"
"\n"
"\n"
"\n"
"# Position of this state in the editor [x,y]\n"
"float32[2] position\n"
"\n"
"# Outcomes of this state\n"
"# Defines the order of the lists: transitions, autonomy\n"
"string[] outcomes\n"
"# Transition targets (state names or container outcomes) of the outcomes\n"
"string[] transitions\n"
"# Required autonomy level of the outcomes\n"
"int8[] autonomy\n"
"\n"
"# Userdata of this state\n"
"# Merges own input_keys and output_keys, no duplicates\n"
"string[] userdata_keys\n"
"# Remapping of the corresponding own key (= key used by container)\n"
"string[] userdata_remapping\n"
"================================================================================\n"
"MSG: flexbe_msgs/OutcomeCondition\n"
"# Defines a conjunction of required state outcomes in order to return a concurrency outcome\n"
"string[] state_name\n"
"string[] state_outcome\n"
;
  }

  static const char* value(const ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorSynthesisResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::BehaviorSynthesisResult_<ContainerAllocator>& v)
  {
    s << indent << "error_code: ";
    s << std::endl;
    Printer< ::flexbe_msgs::SynthesisErrorCodes_<ContainerAllocator> >::stream(s, indent + "  ", v.error_code);
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::flexbe_msgs::StateInstantiation_<ContainerAllocator> >::stream(s, indent + "    ", v.states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_BEHAVIORSYNTHESISRESULT_H
