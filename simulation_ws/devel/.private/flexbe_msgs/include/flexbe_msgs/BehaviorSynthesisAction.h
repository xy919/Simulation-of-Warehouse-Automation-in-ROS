// Generated by gencpp from file flexbe_msgs/BehaviorSynthesisAction.msg
// DO NOT EDIT!


#ifndef FLEXBE_MSGS_MESSAGE_BEHAVIORSYNTHESISACTION_H
#define FLEXBE_MSGS_MESSAGE_BEHAVIORSYNTHESISACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <flexbe_msgs/BehaviorSynthesisActionGoal.h>
#include <flexbe_msgs/BehaviorSynthesisActionResult.h>
#include <flexbe_msgs/BehaviorSynthesisActionFeedback.h>

namespace flexbe_msgs
{
template <class ContainerAllocator>
struct BehaviorSynthesisAction_
{
  typedef BehaviorSynthesisAction_<ContainerAllocator> Type;

  BehaviorSynthesisAction_()
    : action_goal()
    , action_result()
    , action_feedback()  {
    }
  BehaviorSynthesisAction_(const ContainerAllocator& _alloc)
    : action_goal(_alloc)
    , action_result(_alloc)
    , action_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::flexbe_msgs::BehaviorSynthesisActionGoal_<ContainerAllocator>  _action_goal_type;
  _action_goal_type action_goal;

   typedef  ::flexbe_msgs::BehaviorSynthesisActionResult_<ContainerAllocator>  _action_result_type;
  _action_result_type action_result;

   typedef  ::flexbe_msgs::BehaviorSynthesisActionFeedback_<ContainerAllocator>  _action_feedback_type;
  _action_feedback_type action_feedback;





  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorSynthesisAction_

typedef ::flexbe_msgs::BehaviorSynthesisAction_<std::allocator<void> > BehaviorSynthesisAction;

typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisAction > BehaviorSynthesisActionPtr;
typedef boost::shared_ptr< ::flexbe_msgs::BehaviorSynthesisAction const> BehaviorSynthesisActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator2> & rhs)
{
  return lhs.action_goal == rhs.action_goal &&
    lhs.action_result == rhs.action_result &&
    lhs.action_feedback == rhs.action_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator1> & lhs, const ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flexbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f70602e7ef6378d09fa82dd8284fb29";
  }

  static const char* value(const ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f70602e7ef6378dULL;
  static const uint64_t static_value2 = 0x09fa82dd8284fb29ULL;
};

template<class ContainerAllocator>
struct DataType< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flexbe_msgs/BehaviorSynthesisAction";
  }

  static const char* value(const ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"BehaviorSynthesisActionGoal action_goal\n"
"BehaviorSynthesisActionResult action_result\n"
"BehaviorSynthesisActionFeedback action_feedback\n"
"\n"
"================================================================================\n"
"MSG: flexbe_msgs/BehaviorSynthesisActionGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"BehaviorSynthesisGoal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: flexbe_msgs/BehaviorSynthesisGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Minimal template for a behavior synthesis action.\n"
"# As long as your action type supports at least the fields listed below, you can also use a custom one.\n"
"\n"
"# Request message as set in the FlexBE UI\n"
"SynthesisRequest request\n"
"\n"
"\n"
"================================================================================\n"
"MSG: flexbe_msgs/SynthesisRequest\n"
"# Minimal template for the request data provided by the FlexBE synthesis interface.\n"
"# Either refer this message as 'request' in the goal part of your synthesis action\n"
"# or implement your own by at least supporting the fields listed below.\n"
"\n"
"# Identifier of this synthesis query, can for example be used to set the name of the resulting state machine\n"
"string name\n"
"\n"
"# Identifier of the system (i.e., configuration data set) to be used by the synthesis tool\n"
"string system\n"
"\n"
"# Goal to be achieved by the synthesized behavior\n"
"string goal\n"
"\n"
"# Initial conditions from which the synthesized behavior will start\n"
"string initial_condition\n"
"\n"
"# Available outcomes of the generated state machine,\n"
"# i.e., possible results of the synthesized behavior\n"
"string[] sm_outcomes\n"
"================================================================================\n"
"MSG: flexbe_msgs/BehaviorSynthesisActionResult\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalStatus status\n"
"BehaviorSynthesisResult result\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalStatus\n"
"GoalID goal_id\n"
"uint8 status\n"
"uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n"
"uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n"
"uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n"
"                            #   and has since completed its execution (Terminal State)\n"
"uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n"
"uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n"
"                            #    to some failure (Terminal State)\n"
"uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n"
"                            #    because the goal was unattainable or invalid (Terminal State)\n"
"uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n"
"                            #    and has not yet completed execution\n"
"uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n"
"                            #    but the action server has not yet confirmed that the goal is canceled\n"
"uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n"
"                            #    and was successfully cancelled (Terminal State)\n"
"uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n"
"                            #    sent over the wire by an action server\n"
"\n"
"#Allow for the user to associate a string with GoalStatus for debugging\n"
"string text\n"
"\n"
"\n"
"================================================================================\n"
"MSG: flexbe_msgs/BehaviorSynthesisResult\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"# Provides feedback regarding possibly occured errors\n"
"SynthesisErrorCodes error_code\n"
"\n"
"# Result of behavior synthesis as a list of state instantiations\n"
"StateInstantiation[] states\n"
"\n"
"\n"
"================================================================================\n"
"MSG: flexbe_msgs/SynthesisErrorCodes\n"
"int32 value\n"
"\n"
"# success\n"
"int32 SUCCESS = 1\n"
"\n"
"# all other values will be considered as any sort of error\n"
"================================================================================\n"
"MSG: flexbe_msgs/StateInstantiation\n"
"# Describes a single instantiation of a state\n"
"\n"
"# Path of this state inside the behavior\n"
"# Last segment of the path is the name of this state\n"
"# e.g. \"/Inner_Statemachine/This_State\"\n"
"string state_path\n"
"\n"
"# Specifies the class implementing this state\n"
"# Use one of the provided CLASS constants if this is not a primitive state\n"
"# e.g. \"CalculationState\"\n"
"string CLASS_STATEMACHINE 	= :STATEMACHINE\n"
"string CLASS_CONCURRENCY 	= :CONCURRENCY\n"
"string CLASS_PRIORITY 		= :PRIORITY\n"
"string CLASS_BEHAVIOR 		= :BEHAVIOR\n"
"string state_class\n"
"\n"
"\n"
"\n"
"# Only relevant for state machine, priority, and concurrency\n"
"# Name of the initial state / state to be monitored\n"
"string initial_state_name\n"
"# Input and output keys (can be remapped below)\n"
"string[] input_keys\n"
"string[] output_keys\n"
"\n"
"# Only relevant for concurrency\n"
"# Outcome conditions\n"
"string[] cond_outcome\n"
"OutcomeCondition[] cond_transition\n"
"\n"
"# Only relevant for behavior\n"
"# Name of the class implementing this state\n"
"string behavior_class\n"
"\n"
"# Only relevant for primitive state\n"
"# List of parameter names and values of this state\n"
"# Order of names and values has to match\n"
"string[] parameter_names\n"
"string[] parameter_values\n"
"\n"
"\n"
"\n"
"# Position of this state in the editor [x,y]\n"
"float32[2] position\n"
"\n"
"# Outcomes of this state\n"
"# Defines the order of the lists: transitions, autonomy\n"
"string[] outcomes\n"
"# Transition targets (state names or container outcomes) of the outcomes\n"
"string[] transitions\n"
"# Required autonomy level of the outcomes\n"
"int8[] autonomy\n"
"\n"
"# Userdata of this state\n"
"# Merges own input_keys and output_keys, no duplicates\n"
"string[] userdata_keys\n"
"# Remapping of the corresponding own key (= key used by container)\n"
"string[] userdata_remapping\n"
"================================================================================\n"
"MSG: flexbe_msgs/OutcomeCondition\n"
"# Defines a conjunction of required state outcomes in order to return a concurrency outcome\n"
"string[] state_name\n"
"string[] state_outcome\n"
"================================================================================\n"
"MSG: flexbe_msgs/BehaviorSynthesisActionFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalStatus status\n"
"BehaviorSynthesisFeedback feedback\n"
"\n"
"================================================================================\n"
"MSG: flexbe_msgs/BehaviorSynthesisFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"# Any custom feedback message regarding the status\n"
"string status\n"
"\n"
"# Progress indication from 0 (started) to 1 (completed)\n"
"float32 progress\n"
"\n"
;
  }

  static const char* value(const ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_goal);
      stream.next(m.action_result);
      stream.next(m.action_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorSynthesisAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flexbe_msgs::BehaviorSynthesisAction_<ContainerAllocator>& v)
  {
    s << indent << "action_goal: ";
    s << std::endl;
    Printer< ::flexbe_msgs::BehaviorSynthesisActionGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.action_goal);
    s << indent << "action_result: ";
    s << std::endl;
    Printer< ::flexbe_msgs::BehaviorSynthesisActionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.action_result);
    s << indent << "action_feedback: ";
    s << std::endl;
    Printer< ::flexbe_msgs::BehaviorSynthesisActionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.action_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLEXBE_MSGS_MESSAGE_BEHAVIORSYNTHESISACTION_H
